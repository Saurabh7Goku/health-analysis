{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/saurabh/Projects/health-analysis/app/api/gemini.ts"],"sourcesContent":["export interface HealthPayload {\r\n  age: number;\r\n  gender: string;\r\n  height: number;\r\n  weight: number;\r\n  activityLevel: string;\r\n  bmi: {\r\n    value: number;\r\n    interpretation: string;\r\n  };\r\n  bmr: number;\r\n  calorieNeeds: number;\r\n  healthConditions?: string;\r\n}\r\n\r\nexport async function callGemini(payload: HealthPayload): Promise<string> {\r\n  const prompt = `\r\nYou are a health expert. Based on the following information, generate personalized health recommendations in bullet points.\r\nInclude 3 points on fitness,\r\nInclude 3 points on diet\r\nInclude a brief few points on how to impove given ${payload.healthConditions ? `Health Conditions: ${payload.healthConditions}` : ''}\r\n\r\nReturn response only for the provided information \r\nBe concise and no need to give extra information just some recommendation.\r\n\r\nAge: ${payload.age}\r\nGender: ${payload.gender}\r\nHeight: ${payload.height} cm\r\nWeight: ${payload.weight} kg\r\nBMI: ${payload.bmi.value.toFixed(1)} (${payload.bmi.interpretation})\r\nBMR: ${payload.bmr.toFixed(0)} kcal/day\r\nCalorie Needs: ${payload.calorieNeeds.toFixed(0)} kcal/day\r\nActivity Level: ${payload.activityLevel}\r\n`\r\n\r\n  const apiKey = process.env.GEMINI_API_KEY;\r\n  if (!apiKey) {\r\n    console.error(\"❌ GEMINI_API_KEY is missing\");\r\n    return \"• Gemini API key is missing.\";\r\n  }\r\n\r\n  const res = await fetch(\r\n    `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`,\r\n    {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        contents: [{ parts: [{ text: prompt }] }],\r\n        generationConfig: {\r\n          temperature: 0.9,       // Higher = more creativity\r\n          topK: 40,               // Consider top 40 tokens\r\n          topP: 0.95,             // Use 95% cumulative probability\r\n        },\r\n      }),\r\n    }\r\n  );\r\n  console.log(\"callGemini → healthConditions:\", payload.healthConditions);\r\n  \r\n  const data = await res.json();\r\n\r\n  return data?.candidates?.[0]?.content?.parts?.[0]?.text || \"• Unable to generate recommendations.\";\r\n}\r\n\r\n\r\nexport async function callDietAi(payload: HealthPayload): Promise<string> {\r\n  const prompt = `You are a certified nutritionist AI. Based on the following physical and lifestyle information, \r\n  generate a personalized, structured, and goal-oriented diet plan for the Both types of user(Veg & Non-Veg). The diet should be realistic, sustainable, \r\n  and aimed at optimizing their health.\r\n\r\n  User Details:\r\n  \r\n  Age: ${payload.age}\r\n  \r\n  Gender: ${payload.gender}\r\n  \r\n  Height: ${payload.height} cm\r\n  \r\n  Weight: ${payload.weight} kg\r\n  \r\n  BMI: ${payload.bmi.value.toFixed(1)} (${payload.bmi.interpretation})\r\n  \r\n  BMR: ${payload.bmr.toFixed(0)} kcal/day\r\n  \r\n  Calorie Needs: ${payload.calorieNeeds.toFixed(0)} kcal/day\r\n  \r\n  Activity Level: ${payload.activityLevel}\r\n\r\n  ${payload.healthConditions ? `Health Conditions: ${payload.healthConditions}` : ''}\r\n  \r\n  Instructions:\r\n  \r\n  Briefly explain what the BMI and BMR indicate about the person's body condition.\r\n  \r\n  Clearly state the user's recommended daily caloric intake based on their BMR and activity level.\r\n  \r\n  Provide a structured meal plan:\r\n  \r\n  Breakfast\r\n  \r\n  Mid-morning snack\r\n  \r\n  Lunch\r\n  \r\n  Evening snack\r\n  \r\n  Dinner\r\n  \r\n  Each meal should include:\r\n  \r\n  Food items with portion sizes\r\n  \r\n  Approximate calories per meal\r\n  \r\n  Balanced macro distribution (carbs, protein, fats)\r\n  \r\n  Add a list of foods to avoid and foods to prioritize.\r\n  \r\n  Recommend how often the user should review or adjust their diet.\r\n  \r\n  Provide the plan in a clean and easy-to-read format, suitable for users with no nutrition background.\r\n`\r\n\r\n  const apiKey = process.env.GEMINI_API_KEY;\r\n  if (!apiKey) {\r\n    return \"• Gemini API key is missing.\";\r\n  }\r\n\r\n  const res = await fetch(\r\n    `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`,\r\n    {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        contents: [{ parts: [{ text: prompt }] }],\r\n        generationConfig: {\r\n          temperature: 0.75,       // Higher = more creativity\r\n          topK: 40,               // Consider top 40 tokens\r\n          topP: 0.95,             // Use 95% cumulative probability\r\n        },\r\n      }),\r\n    }\r\n  );\r\n  const data = await res.json();\r\n  return data?.candidates?.[0]?.content?.parts?.[0]?.text || \"• Unable to generate recommendations.\";\r\n}"],"names":[],"mappings":";;;;AAeO,eAAe,WAAW,OAAsB;IACrD,MAAM,SAAS,CAAC;;;;kDAIgC,EAAE,QAAQ,gBAAgB,GAAG,CAAC,mBAAmB,EAAE,QAAQ,gBAAgB,EAAE,GAAG,GAAG;;;;;KAKhI,EAAE,QAAQ,GAAG,CAAC;QACX,EAAE,QAAQ,MAAM,CAAC;QACjB,EAAE,QAAQ,MAAM,CAAC;QACjB,EAAE,QAAQ,MAAM,CAAC;KACpB,EAAE,QAAQ,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,QAAQ,GAAG,CAAC,cAAc,CAAC;KAC9D,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,GAAG;eACf,EAAE,QAAQ,YAAY,CAAC,OAAO,CAAC,GAAG;gBACjC,EAAE,QAAQ,aAAa,CAAC;AACxC,CAAC;IAEC,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;IACzC,IAAI,CAAC,QAAQ;QACX,QAAQ,KAAK,CAAC;QACd,OAAO;IACT;IAEA,MAAM,MAAM,MAAM,MAChB,CAAC,6FAA6F,EAAE,QAAQ,EACxG;QACE,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;YACnB,UAAU;gBAAC;oBAAE,OAAO;wBAAC;4BAAE,MAAM;wBAAO;qBAAE;gBAAC;aAAE;YACzC,kBAAkB;gBAChB,aAAa;gBACb,MAAM;gBACN,MAAM;YACR;QACF;IACF;IAEF,QAAQ,GAAG,CAAC,kCAAkC,QAAQ,gBAAgB;IAEtE,MAAM,OAAO,MAAM,IAAI,IAAI;IAE3B,OAAO,MAAM,YAAY,CAAC,EAAE,EAAE,SAAS,OAAO,CAAC,EAAE,EAAE,QAAQ;AAC7D;AAGO,eAAe,WAAW,OAAsB;IACrD,MAAM,SAAS,CAAC;;;;;;OAMX,EAAE,QAAQ,GAAG,CAAC;;UAEX,EAAE,QAAQ,MAAM,CAAC;;UAEjB,EAAE,QAAQ,MAAM,CAAC;;UAEjB,EAAE,QAAQ,MAAM,CAAC;;OAEpB,EAAE,QAAQ,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,QAAQ,GAAG,CAAC,cAAc,CAAC;;OAE9D,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,GAAG;;iBAEf,EAAE,QAAQ,YAAY,CAAC,OAAO,CAAC,GAAG;;kBAEjC,EAAE,QAAQ,aAAa,CAAC;;EAExC,EAAE,QAAQ,gBAAgB,GAAG,CAAC,mBAAmB,EAAE,QAAQ,gBAAgB,EAAE,GAAG,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCrF,CAAC;IAEC,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;IACzC,IAAI,CAAC,QAAQ;QACX,OAAO;IACT;IAEA,MAAM,MAAM,MAAM,MAChB,CAAC,6FAA6F,EAAE,QAAQ,EACxG;QACE,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;YACnB,UAAU;gBAAC;oBAAE,OAAO;wBAAC;4BAAE,MAAM;wBAAO;qBAAE;gBAAC;aAAE;YACzC,kBAAkB;gBAChB,aAAa;gBACb,MAAM;gBACN,MAAM;YACR;QACF;IACF;IAEF,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,OAAO,MAAM,YAAY,CAAC,EAAE,EAAE,SAAS,OAAO,CAAC,EAAE,EAAE,QAAQ;AAC7D","debugId":null}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":["file:///C:/saurabh/Projects/health-analysis/app/api/calculate/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { callGemini } from '@/app/api/gemini';\r\n\r\nexport async function POST(request: Request) {\r\n    console.log('API /calculate called', new Date().toISOString()); // Debug log\r\n    const data = await request.json();\r\n    const { name, age, gender, height, weight, activityLevel, healthConditions } = data;\r\n\r\n    const heightInMeters = height / 100;\r\n    const bmi = weight / (heightInMeters * heightInMeters);\r\n    let bmiInterpretation = '';\r\n    if (bmi < 18.5) bmiInterpretation = 'Underweight';\r\n    else if (bmi < 25) bmiInterpretation = 'Normal weight';\r\n    else if (bmi < 30) bmiInterpretation = 'Overweight';\r\n    else bmiInterpretation = 'Obese';\r\n\r\n    let bmr: number;\r\n    if (gender === 'male') {\r\n        bmr = 10 * weight + 6.25 * height - 5 * age + 5;\r\n    } else {\r\n        bmr = 10 * weight + 6.25 * height - 5 * age - 161;\r\n    }\r\n\r\n    const activityMultipliers: { [key: string]: number } = {\r\n        sedentary: 1.2,\r\n        lightly: 1.375,\r\n        moderately: 1.55,\r\n        very: 1.725,\r\n    };\r\n    const calorieNeeds = bmr * activityMultipliers[activityLevel];\r\n\r\n    const payload = {\r\n        name,\r\n        age,\r\n        gender,\r\n        height,\r\n        weight,\r\n        activityLevel,\r\n        bmi: { value: bmi, interpretation: bmiInterpretation },\r\n        bmr,\r\n        calorieNeeds,\r\n        healthConditions,\r\n    };\r\n\r\n    const text = await callGemini(payload);\r\n    const recommendations = text\r\n        .split('\\n')\r\n        .filter(line =>\r\n            line.trim().startsWith('•') ||\r\n            line.trim().startsWith('-') ||\r\n            line.trim().startsWith('*')\r\n        )\r\n        .map(line => line.replace(/^[-•*]\\s*/, '').trim());\r\n\r\n    return NextResponse.json({\r\n        name,\r\n        gender,\r\n        height,\r\n        weight,\r\n        bmi: { value: bmi, interpretation: bmiInterpretation },\r\n        bmr,\r\n        calorieNeeds,\r\n        recommendations,\r\n    });\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAgB;IACvC,QAAQ,GAAG,CAAC,yBAAyB,IAAI,OAAO,WAAW,KAAK,YAAY;IAC5E,MAAM,OAAO,MAAM,QAAQ,IAAI;IAC/B,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,gBAAgB,EAAE,GAAG;IAE/E,MAAM,iBAAiB,SAAS;IAChC,MAAM,MAAM,SAAS,CAAC,iBAAiB,cAAc;IACrD,IAAI,oBAAoB;IACxB,IAAI,MAAM,MAAM,oBAAoB;SAC/B,IAAI,MAAM,IAAI,oBAAoB;SAClC,IAAI,MAAM,IAAI,oBAAoB;SAClC,oBAAoB;IAEzB,IAAI;IACJ,IAAI,WAAW,QAAQ;QACnB,MAAM,KAAK,SAAS,OAAO,SAAS,IAAI,MAAM;IAClD,OAAO;QACH,MAAM,KAAK,SAAS,OAAO,SAAS,IAAI,MAAM;IAClD;IAEA,MAAM,sBAAiD;QACnD,WAAW;QACX,SAAS;QACT,YAAY;QACZ,MAAM;IACV;IACA,MAAM,eAAe,MAAM,mBAAmB,CAAC,cAAc;IAE7D,MAAM,UAAU;QACZ;QACA;QACA;QACA;QACA;QACA;QACA,KAAK;YAAE,OAAO;YAAK,gBAAgB;QAAkB;QACrD;QACA;QACA;IACJ;IAEA,MAAM,OAAO,MAAM,CAAA,GAAA,sHAAA,CAAA,aAAU,AAAD,EAAE;IAC9B,MAAM,kBAAkB,KACnB,KAAK,CAAC,MACN,MAAM,CAAC,CAAA,OACJ,KAAK,IAAI,GAAG,UAAU,CAAC,QACvB,KAAK,IAAI,GAAG,UAAU,CAAC,QACvB,KAAK,IAAI,GAAG,UAAU,CAAC,MAE1B,GAAG,CAAC,CAAA,OAAQ,KAAK,OAAO,CAAC,aAAa,IAAI,IAAI;IAEnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACrB;QACA;QACA;QACA;QACA,KAAK;YAAE,OAAO;YAAK,gBAAgB;QAAkB;QACrD;QACA;QACA;IACJ;AACJ","debugId":null}}]
}